import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as t}from"./app-DyHd8E06.js";const e={},o=t(`<p>This is a delegate with <code>ref</code> keyword on one of its parameters:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FooByRef</span><span class="token punctuation">(</span><span class="token keyword">ref</span> <span class="token class-name"><span class="token keyword">int</span></span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>To generate a dynamic method matching this delegate, we can use code like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dynamicFooByRef <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;DynamicFooByRef&quot;</span><span class="token punctuation">,</span>
            MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Static <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>HideBySig<span class="token punctuation">,</span>
            CallingConventions<span class="token punctuation">.</span>Standard<span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeByRefType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The key is to invoke <code>.MakeByRefType()</code> on parameter of <code>int</code> in the parameters list to replace it with <code>ref int</code>.</p><p>Now let&#39;s consider another delegate, whose parameter has a <code>in</code> keyword:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">delegate</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">FooByIn</span><span class="token punctuation">(</span><span class="token keyword">in</span> <span class="token class-name"><span class="token keyword">int</span></span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Then, the dynamic method generated by <code>dynamicFooByRef</code> cannot be casted into delegate <code>FooByIn</code>. By inspecting the reflection information from <code>MethodInfo</code> and <code>ParameterInfo</code>, we can see that the <code>IsIn</code> property of parameters with <code>in</code> keyword is true; also, they have attributes of <code>InAttribute</code> and <code>IsReadOnlyAttribute</code>. We can use following code to make the reflection information of our dynamic methods to look exactly the same to the ones generated by compiler:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dynamicFooByIn <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;DynamicFooByRef&quot;</span><span class="token punctuation">,</span>
            MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Static <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>HideBySig<span class="token punctuation">,</span>
            CallingConventions<span class="token punctuation">.</span>Standard<span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeByRefType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> parameterNumber <span class="token operator">=</span> dynamicFooByIn<span class="token punctuation">.</span><span class="token function">DefineParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ParameterAttributes<span class="token punctuation">.</span>In<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameterNumber<span class="token punctuation">.</span><span class="token function">SetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomAttributeBuilder</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">InAttribute</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameterNumber<span class="token punctuation">.</span><span class="token function">SetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomAttributeBuilder</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IsReadOnlyAttribute</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, <code>DefineParameter(...)</code> is used to define metadata of parameters, such as the name and attributes. Then we invoked <code>SetCustomAttribute(...)</code> method on the return value of <code>DefineParameter(...)</code>, which is an instance of <code>ParameterBuilder</code>, to manually add attributes to the parameter.</p><p>So far, the reflection information of our dynamic method <code>dynamicFooByIn</code> has the same metadata with methods generated by compiler, but <code>dynamicFooByIn</code> still cannot be converted into delegate <code>FooByIn</code>.</p><p>This is because that <code>DefineParameter(...)</code> will only effect the metadata in the reflection information, which is <code>MethodInfo</code> and <code>ParameterInfo</code>, the IL generated by <code>dynamicFooByIn</code> is still different with methods generated by compiler. The difference is <code>[in] string&amp; modreq ([System.Runtime]System.Runtime.InteropServices.InAttribute) number</code> in the parameters list of IL. We need to add <code>modreq ([System.Runtime]System.Runtime.InteropServices.InAttribute)</code> into the IL of our dynamic method.</p><p><code>modreq</code> represents &#39;required (custom) modifier&#39;. Here is the description about <code>modreq</code> in the CLI specification:</p><blockquote><p>Custom modifiers, defined using modreq (“required modifier”) and modopt (“optional modifier”), are similar to custom attributes (§II.21) except that modifiers are part of a signature rather than being attached to a declaration. Each modifer associates a type reference with an item in the signature. For example, the const qualifier in the C programming language can be modelled with an optional modifier since the caller of a method that has a const-qualified parameter need not treat it in any special way. On the other hand, a parameter that shall be copy-constructed in C++ shall be marked with a required custom attribute since it is the caller who makes the copy.</p></blockquote><p>In the method <code>DefineMethod</code>, there are parameters for us to use to define required and optional custom modifiers for parameters. So the final code goes as follows:</p><div class="language-csharp line-numbers-mode" data-ext="cs" data-title="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> dynamicFooByIn <span class="token operator">=</span> typeBuilder<span class="token punctuation">.</span><span class="token function">DefineMethod</span><span class="token punctuation">(</span><span class="token string">&quot;DynamicFooByRef&quot;</span><span class="token punctuation">,</span>
            MethodAttributes<span class="token punctuation">.</span>Public <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>Static <span class="token operator">|</span> MethodAttributes<span class="token punctuation">.</span>HideBySig<span class="token punctuation">,</span>
            CallingConventions<span class="token punctuation">.</span>Standard<span class="token punctuation">,</span>
            <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">void</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name"><span class="token keyword">int</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">MakeByRefType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">InAttribute</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name"><span class="token keyword">var</span></span> parameterNumber <span class="token operator">=</span> dynamicFooByIn<span class="token punctuation">.</span><span class="token function">DefineParameter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> ParameterAttributes<span class="token punctuation">.</span>In<span class="token punctuation">,</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameterNumber<span class="token punctuation">.</span><span class="token function">SetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomAttributeBuilder</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">InAttribute</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
parameterNumber<span class="token punctuation">.</span><span class="token function">SetCustomAttribute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">CustomAttributeBuilder</span><span class="token punctuation">(</span>
        <span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IsReadOnlyAttribute</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">GetConstructor</span><span class="token punctuation">(</span>Type<span class="token punctuation">.</span>EmptyTypes<span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Each element in this array <code>[[typeof(InAttribute)]]</code> is the array of modifiers for one parameter. Since only <code>InAttribute</code> appears in the required modifiers list, we only add it into the modifiers array for parameter &#39;number&#39;. Note that if we remove the code after <code>DefineMethod</code>, which includes <code>DefineParameter(...)</code> and <code>SetCustomAttribute(...)</code>, then our generated dynamic method still can be converted into delegate <code>FooByIn</code>, and the reason has been discussed above: they only affect the reflection information and is not involved in the runtime type check.</p>`,17),p=[o];function c(i,u){return a(),s("div",null,p)}const d=n(e,[["render",c],["__file","Emitting Dynamic Method with 'in' Parameter.html.vue"]]),k=JSON.parse(`{"path":"/posts/Emitting%20Dynamic%20Method%20with%20'in'%20Parameter.html","title":"Emitting Dynamic Method with 'in' Parameter","lang":"en-US","frontmatter":{"title":"Emitting Dynamic Method with 'in' Parameter","date":"2024-08-14T00:00:00.000Z","isOriginal":true,"tag":["CSharp","Emit","Dynamic Method","Dynamic Code Generation"],"description":"This is a delegate with ref keyword on one of its parameters: To generate a dynamic method matching this delegate, we can use code like this: The key is to invoke .MakeByRefType...","head":[["meta",{"property":"og:url","content":"https://oldvincent.github.io/posts/Emitting%20Dynamic%20Method%20with%20'in'%20Parameter.html"}],["meta",{"property":"og:site_name","content":"Code Enthusiast"}],["meta",{"property":"og:title","content":"Emitting Dynamic Method with 'in' Parameter"}],["meta",{"property":"og:description","content":"This is a delegate with ref keyword on one of its parameters: To generate a dynamic method matching this delegate, we can use code like this: The key is to invoke .MakeByRefType..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2024-08-14T11:25:40.000Z"}],["meta",{"property":"article:author","content":"Haoyu Jia"}],["meta",{"property":"article:tag","content":"CSharp"}],["meta",{"property":"article:tag","content":"Emit"}],["meta",{"property":"article:tag","content":"Dynamic Method"}],["meta",{"property":"article:tag","content":"Dynamic Code Generation"}],["meta",{"property":"article:published_time","content":"2024-08-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-14T11:25:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Emitting Dynamic Method with 'in' Parameter\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-08-14T11:25:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Haoyu Jia\\",\\"url\\":\\"https://github.com/OldVincent\\"}]}"]]},"headers":[],"git":{"createdTime":1723634740000,"updatedTime":1723634740000,"contributors":[{"name":"Haoyu Jia","email":"jia_vincent@outlook.com","commits":1}]},"readingTime":{"minutes":2.09,"words":627},"filePathRelative":"posts/Emitting Dynamic Method with 'in' Parameter.md","localizedDate":"August 14, 2024","excerpt":"<p>This is a delegate with <code>ref</code> keyword on one of its parameters:</p>\\n<div class=\\"language-csharp\\" data-ext=\\"cs\\" data-title=\\"cs\\"><pre class=\\"language-csharp\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">delegate</span> <span class=\\"token return-type class-name\\"><span class=\\"token keyword\\">void</span></span> <span class=\\"token function\\">FooByRef</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">ref</span> <span class=\\"token class-name\\"><span class=\\"token keyword\\">int</span></span> number<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div>","autoDesc":true}`);export{d as comp,k as data};
